To setup flask: 
export FLASK_APP=diy_dashboard (package name, that is)
export FLASK_DEBUG=true
run flask

SASS:
On mac, run 'sudo gem install sass'
then: sass --watch stylesheet_dir

Requirements:
pip freeze > requirements.txt
pip install -r requirements.txt

To create Python 3 virtual env:
python3 -m venv myenv

To run the examples:
python3 tester.py

To install the lib and also work on it, run from root:
pip install -e .

See an article on how WSGI python servers work.
Essentially you must point the WSGI server to a callable that takes a dictionary
of the relevant request info and returns a response. In flask the Flask object is
itself the callable.

The docs dir must be called "docs" so that readthedocs can build it properly

Upload instructions:
https://packaging.python.org/tutorials/distributing-packages/
python3 setup.py sdist
python3 setup.py bdist_wheel
twine upload dist/*

To pip install from test pypi:
pip install --index-url https://test.pypi.org/simple/ diva
Actually (installs reqs from actual pypi):
pip install -i https://testpypi.python.org/pypi --extra-index-url https://pypi.python.org/pypi diva

For testing:
test must be named test_*.py or *_test.py
just run "pytest", it will find all test files

Tox:
To make all the interpreters available, I installed them like this: https://gist.github.com/Bouke/11261620. Then I did "pyenv global ..." (note not local!). Then I ran tox from outside the virtualenv! This may be necessary b/c both pyenv and the virtualenv mess with PATH.
Running "tox" will create a sdist, install it in each venv specified in tox.ini, and run the command (pytest) in each one.

When building docs: to avoid using outdated version of the repo, delete the @... commit tag from requirements.txt. Must do this after every freeze, sadly.
